apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'
apply plugin: "com.github.spotbugs"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

spotbugs {
    toolVersion = '3.1.12'
}


sourceSets {
    // we define `main` sourceSet here, so SpotBugs Gradle Plugin generates `spotbugsMain` task
    main {
        java.srcDirs = ['src/main/java']
    }
}

//task spotbugs(type: com.github.spotbugs.SpotBugsTask) {
//    ignoreFailures= true  //有警告错误的时候也允许构建
//    effort= "default"  //分析级别  Minimal/default/Maximal
//    reportLevel= "low"  //报告级别 low/medium/high
//    classes = files("${project.rootDir}/app/build/intermediates/javac/debug/compileDebugJavaWithJavac")  //.classe文件夹地址
//    source= fileTree("src/main/java/")  //源代码文件地址
////    excludeFilter = new File("${project.rootDir}/findbugs-filter.xml")
//    classpath= files()
//    reports.xml.enabled = false
//    reports.html.enabled = true
//
//}
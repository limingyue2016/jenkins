apply plugin: 'com.android.application'
apply plugin: 'findbugs'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task findbugs(type: FindBugs,dependsOn:'assembleDebug') {  //定义一个task任务，类型是FindBugs，指定依赖assembleDebug是为了先生成.classe文件，才能对代码进行静态分析
    ignoreFailures= true  //有警告错误的时候也允许构建
    effort= "default"  //
    reportLevel= "low"  //报告级别 low，medium,high
    println( "$project.buildDir")
    excludeFilter = new File("${project.rootDir}/findbug_filter.xml")
    classes = files("$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac")  //.classe文件夹地址
    source= fileTree("src/main/java/")  //源代码文件地址
    classpath= files()
    reports{  //指定报告类型，有xml和html，只允许一种输出格式
        xml.enabled=false
        html.enabled=true
        xml {
            destination "$project.buildDir/build/findbugs.xml"
        }
        html{
            destination "$project.buildDir/findbugs.html"
        }
    }
}


